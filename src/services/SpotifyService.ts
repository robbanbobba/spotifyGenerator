import axios from 'axios';

const spotifyApi = axios.create({
  baseURL: 'https://api.spotify.com/v1/',
});

export const getAccessToken = async (code: string, codeVerifier: string, clientId: string, clientSecret: string): Promise<{ access_token: string, refresh_token: string, expires_in: number }> => {
  try {
    const url = 'https://accounts.spotify.com/api/token';
    console.log("PLOPP")
    // console.log("Now getAccessToken runs in service");

    console.log("Clientid", clientId);
    console.log(clientSecret);
    console.log(codeVerifier);
    console.log(code);

    const requestBody = new URLSearchParams({
      client_secret: clientSecret,
      client_id: clientId,
      grant_type: 'authorization_code',
      code: code,
      redirect_uri: 'https://spotifylistgenerator.netlify.app/callback',
      code_verifier: codeVerifier,
    });

    const response = await axios.post(url, requestBody.toString(), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });
    console.log("Request Body:", requestBody.toString());
    if (response.status === 200) {
      const { access_token, refresh_token, expires_in } = response.data;
      console.log("Now I'm a success!");
      console.log("Access Token:", access_token);
      console.log("Refresh Token:", refresh_token);
      localStorage.setItem('refresh_token', refresh_token);
      setAccessToken(access_token);
      return { access_token, refresh_token, expires_in };
    } else {
      console.log("Now I'm a failure!");
      throw new Error('Failed to fetch access token');
    }
  } catch (error) {
    console.log("Now I'm a catched failure!");
    console.error('Error fetching access token:', error);
    throw error;
  }
};

export const setAccessToken = (token: string): void => {
  spotifyApi.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  localStorage.setItem('access_token', token);
};

export const refreshAccessToken = async (refreshToken: string, clientId: string, clientSecret: string): Promise<{ access_token: string, refresh_token?: string, expires_in: number }> => {
  try {
    const url = 'https://accounts.spotify.com/api/token';
    console.log("Now refreshAccessToken runs in service");

    const requestBody = new URLSearchParams({
      client_secret: clientSecret,
      client_id: clientId,
      grant_type: 'refresh_token',
      refresh_token: refreshToken,
    });

    const response = await axios.post(url, requestBody.toString(), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });

    if (response.status === 200) {
      const { access_token, refresh_token, expires_in } = response.data;
      console.log("Successfully refreshed access token!");
      console.log("New Access Token:", access_token);
      console.log("New Refresh Token:", refresh_token);
      localStorage.setItem('access_token', access_token);
      setAccessToken(access_token);
      if (refresh_token) {
        localStorage.setItem('refresh_token', refresh_token);
      }
      return { access_token, refresh_token, expires_in };
    } else {
      console.log("Failed to refresh access token!");
      throw new Error('Failed to refresh access token');
    }
  } catch (error) {
    console.log("Caught error during token refresh!");
    console.error('Error refreshing access token:', error);
    throw error;
  }
};

export const getPlaylist = async (mood: string, songId: string, accessToken: string) => {
  const response = await fetch(`https://api.spotify.com/v1/recommendations?seed_tracks=${songId}${mood}`, {
    headers: {
      Authorization: 'Bearer ' + accessToken,
      "Access-Control-Allow-Origin": "null",
    }
  })
  if (!response.ok) {
    throw new Error(`${response.status} ${response.statusText}`);
  }
  const data = await response.json()

  console.log("Data: ", data)

  return data
}

export const getTopTracks = async (accessToken: string) => {
  const response = await fetch("https://api.spotify.com/v1/me/top/tracks?limit=20", {
    headers: {
      Authorization: 'Bearer ' + accessToken
    }
  })
  if (!response.ok) {
    throw new Error(`${response.status} ${response.statusText}`);
  }
  const data = response.json()

  return data
}

export const createPlaylist = async (userId: string, name: string, accessToken: string) => {
  const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      name,
      description: 'Generated by Mood Playlist App',
      public: false
    })
  });

  if (!response.ok) {
    throw new Error(`${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return data;
};

export const addTracksToPlaylist = async (playlistId: string, trackUris: string[], accessToken: string) => {
  const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      uris: trackUris
    })
  });

  if (!response.ok) {
    throw new Error(`${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return data;
};

export const getUserId = async (accessToken: string) => {
  const response = await fetch('https://api.spotify.com/v1/me', {
    headers: {
      'Authorization': `Bearer ${accessToken}`
    }
  });

  if (!response.ok) {
    throw new Error(`${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return data.id;
};

export default spotifyApi;